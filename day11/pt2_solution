#!/usr/bin/env python3

from itertools import groupby
from operator import itemgetter


def rule1(x):
    if x == 0:
        return [1]
    return []


def rule2(x):
    digits = str(x)
    num_digits = len(digits)
    if num_digits % 2 == 0:
        mid = num_digits // 2
        lhs, rhs = digits[:mid], digits[mid:]
        return [int(lhs), int(rhs)]
    return []


def rule3(x):
    return [x * 2024]


def apply_rules(nums):
    result = []
    for x in nums:
        result.extend(rule1(x) or rule2(x) or rule3(x))
    return result


def merge_histogram(histogram):
    histogram.sort(key=itemgetter(0))
    return [(key, sum(item[1] for item in group)) for key, group in groupby(histogram, key=itemgetter(0))]


def apply_rules2(histogram):
    new_histogram = []
    for x, count in histogram:
        transformed = rule1(x) or rule2(x) or rule3(x)
        new_histogram.extend((val, count) for val in transformed)
    return merge_histogram(new_histogram)


def read_input(file_name="input"):
    try:
        with open(file_name, "r") as file:
            line = file.readline().strip()
            return list(map(int, line.split()))
    except FileNotFoundError:
        print(f"Error: puzzle '{file_name}' not found! Are you in the right directory?")
        exit(1)
    except ValueError:
        print(f"Error: File '{file_name}' contains invalid data. Ensure it contains space-separated integers.")
        exit(1)


if __name__ == "__main__":
    initial_input = read_input()

    initial_histogram = [(x, 1) for x in initial_input]

    pt2_histogram = initial_histogram
    for _ in range(75):
        pt2_histogram = apply_rules2(pt2_histogram)
    pt2_sum = sum(count for _, count in pt2_histogram)

    print("Stone count:", pt2_sum)

