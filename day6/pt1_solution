#!/usr/bin/env zsh

## env setup

fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)
autoload libmiscinit
libmiscinit

! isfile ./input_arrays && \
  ./convert_to_arrays

! isfile ./input_arrays && \
  print "Could not find puzzle input arrays! Did you run convert_to_arrays?" && \
  return 1

rm -rf /tmp/aoc_day6
mkdir /tmp/aoc_day6
#rm -rf ./ledger
#rm -rf ./working
#rm -rf ./query
#rm -rf ./array_update

#array_count=130
#indice_count=130

result_counter=0
unset already_crossed
declare -a already_crossed

array_count=10
indice_count=10

## fetch puzzle input
source ./input_arrays

## update position
update_position() {
  # char to be swapped in
  update_char=$1
  # error if insufficient input
  ([ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$1" ]) && \
    print "update_position" && \
    print "usage: x_coord= y_coord= update_position <character>" && \
    return 1
  # error if out of bounds update attempt
  ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ]) && \
    return 1
  # write pos. update script (I know, I know)
  rm -rf ./working
  #env setup
  print '#!/usr/bin/env zsh' > ./working
  print '' >> ./working
  #fetch input arrays
  print 'source ./input_arrays' >> ./working
  #env setup
  print 'rm -rf ./array_update' >> ./working
  print "x_coord="$x_coord"" >> ./working
  print "y_coord="$y_coord"" >> ./working
  print -n "update_char='" >> ./working
  print -n "$update_char" >> ./working
  print "'" >> ./working
  #print start of updated array
  print 'print -n "y_array_"$y_coord"=(" > ./array_update' >> ./working
  #iterate over each indice in target array, add indice as is if not target, add swap char instead if target
  print 'indice_count=0' >> ./working

  print -n 'for indice in $=y_array_' >> ./working
  print -n "$y_coord" >> ./working
  print '; do' >> ./working

  print '  indice_count=$((indice_count+1))' >> ./working

  print '  [ "$indice_count" = "$x_coord" ] && \' >> ./working

  print -n 'print -n "' >> ./working
  print -n "'" >> ./working
  print '" >> ./array_update && \' >> ./working

  print -n 'print -n "' >> ./working
  print -n "$update_char" >> ./working
  print '">> ./array_update && \' >> ./working

  print -n 'print "' >> ./working
  print -n "'" >> ./working
  print '" >> ./array_update || \' >> ./working

  print -n '(print -n "' >> ./working
  print -n "'" >> ./working
  print '" >> ./array_update && \' >> ./working

  print -n 'print -n "' >> ./working
  print -n '$indice' >> ./working
  print '">> ./array_update && \' >> ./working

  print -n 'print "' >> ./working
  print -n "'" >> ./working
  print '" >> ./array_update)' >> ./working

  print 'done' >> ./working
  print "print ')' >> ./array_update" >> ./working
  chmod 755 ./working
  ./working
  source ./array_update
  ! isfile ./ledger && \
    touch ./ledger
  fox-fr ./array_update >> ./ledger
  print '' >> ./ledger
}

query_position() {
  # error if insufficient input
  ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && \
    print "query_position" && \
    print "usage: x_coord= y_coord= query_position <character>" && \
    return 1
  # error if out of bounds query attempt
  ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ]) && \
    return 1
  rm -rf ./query
  # write position query script (I know, I know)
  print '#!/usr/bin/env zsh' > ./query
  print '' >> ./query
  print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> ./query
  print 'autoload libmiscinit' >> ./query
  print 'libmiscinit' >> ./query
  #env setup
  print "x_coord="$x_coord"" >> ./query
  print "y_coord="$y_coord"" >> ./query
  print "source ./input_arrays" >> ./query
  print 'isfile ./ledger && \' >> ./query
  print "source ./ledger" >> ./query
  print 'indice_count=0' >> ./query
  #iterate over each indice until reaching x coord
  print -n 'for indice in $=y_array_' >> ./query
  print -n "$y_coord" >> ./query
  print '; do' >> ./query

  print 'indice_count=$((indice_count+1))' >> ./query
  print '[ "$indice_count" = "$x_coord" ] && \' >> ./query
  print '  print "$indice" && \' >> ./query
  print '  break' >> ./query

  print 'done' >> ./query
  chmod 755 ./query
  query_result=$(./query)
  print "$query_result"
}

search_position() {
  do_search=$1
  x_coord=0
  y_coord=0
  found=0
  while true; do
    y_coord=$((y_coord+1))
    [ "$y_coord" = "$((array_count+1))" ] && \
      break
    x_coord=0
    while true; do
      x_coord=$((x_coord+1))
      [ "$x_coord" = "$((indice_count+1))" ] && \
        break
      test_position=$(query_position)
      [ "$test_position" = "$do_search" ] && \
        print ""$x_coord" "$y_coord"" && \
        found=1
    done
    [ "$found" = 1 ] && \
      break
  done
}

mov() {
  invalid=0
  ([ -z "$x_from" ] || [ -z "$y_from" ]) && \
    print "Error: invalid mov call" && \
    return 1

  ([ "$y_from" -gt "$array_count" ] || \
   [ "$x_from" -gt "$indice_count" ]) && \
    invalid=1

  ([ "$y_from" -le "0" ] || \
   [ "$x_from" -le "0" ]) && \
    invalid=1

  [ "$invalid" = 1 ] && \
    print "$result_counter" && \
    return 1

  # fetch contents of indice to be moved
  x_coord=$x_from
  y_coord=$y_from
  tobe_moved=$(query_position)
#  print "tobemov x "$x_coord" y "$y_coord""
#  print "contains "$tobe_moved""

  # set coord based on char
  [ "$tobe_moved" = '^' ] && \
    y_coord=$((y_coord-1))
  [ "$tobe_moved" = 'v' ] && \
    y_coord=$((y_coord+1))
  [ "$tobe_moved" = '<' ] && \
    x_coord=$((x_coord-1))
  [ "$tobe_moved" = '>' ] && \
    x_coord=$((x_coord+1))

 # print "new coord x"$x_coord" y"$y_coord""
 # print -n "contains "
 # query_position

  # if out of bounds
  ([ "$x_coord" -gt "$indice_count" ] || \
   [ "$x_coord" -le "0" ] || \
   [ "$y_coord" -gt "$array_count" ] || \
   [ "$y_coord" -le "0" ]) && \
    print "result: "$result_counter"" && \
    return 0
  # query move to position for obstacle
  moveto=$(query_position)
#  print "moveto contains "$moveto""
  [ -z "$moveto" ] && \
    print "result: "$result_counter"" && \
    return 0
  if [ "$moveto" = '#' ]; then
    x_coord=$x_from
    y_coord=$y_from
    comp_switch=0
    ([ "$tobe_moved" = '^' ] && \
     [ "$comp_switch" = 0 ]) && \
      update_position '>' && \
      comp_switch=1
    ([ "$tobe_moved" = '>' ] && \
     [ "$comp_switch" = 0 ]) && \
      update_position 'v' && \
      comp_switch=1
    ([ "$tobe_moved" = 'v' ] && \
     [ "$comp_switch" = 0 ]) && \
      update_position '<' && \
      comp_switch=1
    ([ "$tobe_moved" = '<' ] && \
     [ "$comp_switch" = 0 ]) && \
      update_position '^' && \
      comp_switch=1
    return 2
  else
    update_position $tobe_moved
    x_to=$x_coord
    y_to=$y_coord
#    x_coord=$x_from
#    y_coord=$y_from
#    update_position $moveto
    ziscrossed=0
    check_crossed=""$x_coord""$y_coord""
    for chkcross in $=already_crossed; do
#       print "check "$chkcross" against "$check_crossed""
      [ "$chkcross" = "$check_crossed" ] && \
        ziscrossed=1
#        print "already crossed"
    done
    [ "$ziscrossed" = 0 ] && \
      result_counter=$((result_counter+1)) && \
      already_crossed+=("$check_crossed")
#      print "not crossed, adding"
    export x_from=$x_to
    export y_from=$y_to
    print "$result_counter"
    return 3
  fi
}

print "           Fetching starting position..."
print "(this program isnt hanging, it's just slow)"
starting_position=$(search_position '^')
print ''
print "Solving puzzle..."
unset x_from
unset y_from
IFS=$' '
  for star_pos in $=starting_position; do
    ! [ -z "$x_from" ] && \
      y_from=$star_pos || \
      x_from=$star_pos
  done
unset IFS
#print "debug: "$x_from""
#print "debug: "$y_from""
until mov; do
  true
done

##cleanup
rm -rf ./ledger
rm -rf ./working
rm -rf ./query
rm -rf ./array_update
