#!/usr/bin/env zsh

##env setup
fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)
autoload libmiscinit
libmiscinit

print "                          Solving puzzle, please wait..."
print "(this program isn't hanging, its just slow. Took about 45 mins on my Ryzen 5 5500G)"

## fetch input data
#error out if not executed in same directory as solution since I CBF to make this position-independent
! isfile $(pwd)/input && \
  print "Error: could not find input file. Are you in the right directory?" && \
  exit 1
# actually fetch input data. Using fox-fr for no reason other than that I wrote it
dayone_input_raw=$(fox-fr $(pwd)/input)

## convert raw input into two separate arrays
#declare arrays
unset do_list_array_one
unset do_list_array_two
declare -a do_list_array_one
declare -a do_list_array_two

#parse raw input line by line, separate numbers into respective arrays
IFS=$'\n'
for dayone_lines in $=dayone_input_raw; do
  dayone_arrswitch=0
  IFS=$'   '
  for dayone_sep in $=dayone_lines; do
    if [ "$dayone_arrswitch" = 0 ]; then
      do_list_array_one+=("$dayone_sep")
      dayone_arrswitch=1
    else
      do_list_array_two+=("$dayone_sep") && \
      dayone_arrswitch=0
    fi
  done
done
unset IFS

## sort each array from smallest to largest

#declare arrays which will hold sorted numbers
unset dayone_arr_one_cln
declare -a dayone_arr_one_cln
unset dayone_arr_two_cln
declare -a dayone_arr_two_cln

# perform sort (yes I know I should use a function here)
while true; do
  [ -z "$do_list_array_one[1]" ] && \
  break
  dayone_workingnum=$do_list_array_one[1]
  do_list_array_one[1]=
  isnot_smallest=0
  for check_num in $=do_list_array_one; do
    [ $dayone_workingnum -gt $check_num ] && \
      isnot_smallest=1
  done
  [ "$isnot_smallest" = 0 ] && \
    dayone_arr_one_cln+=("$dayone_workingnum")
  [ "$isnot_smallest" = 1 ] && \
    do_list_array_one+=("$dayone_workingnum")
  unset placeholder
  declare -a placeholder
  for entry in $=do_list_array_one; do
    ! [ -z "$entry" ] && \
    placeholder+=("$entry")
  done
  unset do_list_array_one
  declare -a do_list_array_one
  for addback in $=placeholder; do
    do_list_array_one+=("$addback")
  done
done

while true; do
  [ -z "$do_list_array_two[1]" ] && \
  break
  dayone_workingnum=$do_list_array_two[1]
  do_list_array_two[1]=
  isnot_smallest=0
  for check_num in $=do_list_array_two; do
    [ $dayone_workingnum -gt $check_num ] && \
      isnot_smallest=1
  done
  [ "$isnot_smallest" = 0 ] && \
    dayone_arr_two_cln+=("$dayone_workingnum")
  [ "$isnot_smallest" = 1 ] && \
    do_list_array_two+=("$dayone_workingnum")
  unset placeholder
  declare -a placeholder
  for entry in $=do_list_array_two; do
    ! [ -z "$entry" ] && \
    placeholder+=("$entry")
  done
  unset do_list_array_two
  declare -a do_list_array_two
  for addback in $=placeholder; do
    do_list_array_two+=("$addback")
  done
done

## Compare entries on each list and add up sum of differences
dayone_arr_count=0
finalsums=0
for compareone in $=dayone_arr_one_cln; do
  dayone_arr_count=$((dayone_arr_count+1))
  comparetwo=$dayone_arr_two_cln[$dayone_arr_count]
  [ "$compareone" -gt "$comparetwo" ] && \
    inputnum=$((compareone-comparetwo)) && \
    finalsums=$((finalsums+inputnum))
  [ "$comparetwo" -gt "$compareone" ] && \
    inputnum=$((comparetwo-compareone)) && \
    finalsums=$((finalsums+inputnum))
done

## print results
print "$finalsums"
