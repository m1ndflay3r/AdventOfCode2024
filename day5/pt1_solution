#!/usr/bin/env zsh

## env setup
fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)
autoload libmiscinit
libmiscinit

! isfile ./input && \
  print "Cannot find puzzle input! Are you in the right directory?" && \
  return 1

## fetch input
#fetch raw input
dayfive_input_raw=$(fox-fr ./input)

#create arrays to store rules + updates + results
unset dayfive_rules_array
unset dayfive_updates_array
unset dayfive_mid_numbers
declare -a dayfive_rules_array
declare -a dayfive_updates_array
declare -a dayfive_mid_numbers

#iterate through each input line, using '|' to denote rules and ',' to denote updates
IFS=$'\n'
for parse_line in $=dayfive_input_raw; do
  print -rn $parse_line | grep '|' && \
  print "is rule, saving to rule array" && \
  dayfive_rules_array+=("$parse_line")
  print -rn $parse_line | grep ',' && \
  print "is update, saving to update array" && \
  dayfive_updates_array+=("$parse_line")
done
unset IFS

## main
matchcount=0
rejectcount=0
# iterate over each rule, checking against each update
for check_rule in $=dayfive_rules_array; do
  unset first_num
  unset second_num
  IFS=$'|'
  for nums in $=check_rule; do
    ! [ -z "$first_num" ] && \
      second_num=$nums || \
      first_num=$nums
  done
  unset IFS
  print "Set first num to "$first_num" and second num to "$second_num""
  print "Scan each update number by number"
  for update_check in $=dayfive_updates_array; do
    print "Checking update "$update_check""
    firstnum_switch=0
    secnum_switch=0
    IFS=$','
    for update_num_check in $=update_check; do
      [ "$firstnum_switch" = 1 ] && \
        print "Scanning "$update_num_check" for second num ("$second_num")" && \
        [ "$update_num_check" = "$second_num" ] && \
          secnum_switch=1 && \
          print "detected second num" || \
          print "number does not match first num"
      [ "$firstnum_switch" = 0 ] && \
        print "Scanning "$update_num_check" for first num ("$first_num")" && \
        [ "$update_num_check" = "$first_num" ] && \
          firstnum_switch=1 && \
          print "detected first num" || \
          print "number does not match first num"
    done
    unset IFS
    [ "$firstnum_switch" = 1 ] && [ "$secnum_switch" = 1 ] && \
      print "Match found, adding update to working array" && \
      dayfive_mid_numbers+=("$update_check") && \
      matchcount=$((matchcount+1)) ||
      print "Match not found, discarding" && \
      rejectcount=$((rejectcount+1))
  done
done

## extract middle number, add together, give results
unset dayfive_to_add
declare -a dayfive_to_add
for extract_mid in $=dayfive_mid_numbers; do
  print "$extract_mid"
done
  print "accepted "$matchcount""
  print "rejected "$rejectcount""
